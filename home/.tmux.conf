# command prefix (like screen) - default is C-b
set -g prefix C-a
unbind C-b
bind a send-prefix

# basic global settings:
set-option -g default-shell $SHELL
set-option -g status-keys vi
set-window-option -g mode-keys vi
set-option -g history-limit 8192

# basic settings
set-window-option -g utf8 on # utf8 support
set-window-option -g aggressive-resize on
set -g default-terminal "screen-256color"

# more intuitive keybindings for splitting
unbind %
bind-key h split-window -v
unbind '"'
bind-key v split-window -h

# quick view of processes
bind '`' split-window "exec top"

# confirm before killing a window or the server
unbind &
bind-key k confirm kill-window
bind-key K confirm kill-server

# mouse operations
set -g mode-mouse off
set -g mouse-resize-pane off
set -g mouse-select-pane off
set -g mouse-select-window off

# Toggle mouse on with ^B m
bind m \
  set -g mode-mouse on \;\
  set -g mouse-resize-pane on \;\
  set -g mouse-select-pane on \;\
  set -g mouse-select-window on \;\
  display 'Mouse: ON'

# Toggle mouse off with ^B M
bind M \
  set -g mode-mouse off \;\
  set -g mouse-resize-pane off \;\
  set -g mouse-select-pane off \;\
  set -g mouse-select-window off \;\
  display 'Mouse: OFF'

unbind +
bind + \
  new-window -d -n tmux-zoom 'clear && echo TMUX ZOOM && read' \;\
  swap-pane -s tmux-zoom.0 \;\
  select-window -t tmux-zoom

unbind -
bind - \
  last-window \;\
  swap-pane -s tmux-zoom.0 \;\
  kill-window -t tmux-zoom

# window title
set-option -g set-titles on
set-option -g set-titles-string '#H - #S:#I.#P #W' # window number,program name,active (or not)
set-window-option -g automatic-rename off # auto name - uses a fair amount of cpu
set-option -g automatic-rename off

# messages
set-window-option -g mode-bg default
set-window-option -g mode-fg magenta
set-option -g message-bg default
set-option -g message-fg magenta

# No visual activity
set -g visual-activity off
set -g visual-bell on

#next/prev tab
bind-key -n C-right next
bind-key -n C-left prev

# start window indexing at one instead of zero
set-option -g base-index 1

# panes
set-option -g pane-border-fg black
set-option -g pane-border-bg default
set-option -g pane-active-border-bg default

# status bar
set-option -g status-utf8 on
set-option -g status-justify centre
set-option -g status-bg default
set-option -g status-fg cyan
set-option -g status-attr bright
set-option -g status-interval 60
set-option -g status-left-length 30
set-option -g status-left '#[fg=magenta]» #[fg=green]#P #[fg=blue,bold](#T)#[default]'
set-option -g status-right '#[fg=cyan]»» #[fg=blue]#S #[fg=magenta]#H #[default]'
set-window-option -g monitor-activity off
set-window-option -g window-status-current-fg white

# active window title colors (default: white, default, bright (= bold))
set-window-option -g window-status-current-fg yellow
set-window-option -g window-status-current-bg default
set-window-option -g window-status-current-attr bright

# window title colors (default: white, default, dim (= non-bold))
set-window-option -g window-status-fg white
set-window-option -g window-status-bg default
set-window-option -g window-status-attr dim

# clock
set-window-option -g clock-mode-colour cyan
set-window-option -g clock-mode-style 24

# Remap pane selection keys to mimic "C-w {h|j|k|l}" in Vim
# (unbinding arrow-keys is optional, but I like doing that to free up keys)
unbind Up
bind k select-pane -U
unbind Down
bind j select-pane -D
unbind Left
bind h select-pane -L
unbind Right
bind l select-pane -R

# .. Alternatively, use existing binds for vim
# smart pane switching with awareness of vim splits
# - requires (vundle) 'christoomey/vim-tmux-navigator'
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l""')"

# C-v - Contents of the system clipboard is displayed in tmux.
# C-c - Choose from the list of tmux paste-buffers, to be put into the system clipboard.
# The same can be applied to the selection clipboard by using C-f and C-d.

# C-c: save into system clipboard (+). With preselection.
bind C-c choose-buffer "run \"tmux save-buffer -b %% - | xsel -i -b\" \; run \" tmux display \\\"Clipboard \(+\) filled with: $(tmux save-buffer -b %1 - | dd ibs=1 obs=1 status=noxfer count=80 2> /dev/null)... \\\" \" "
# C-v: copy from + clipboard.
bind C-v run "tmux set-buffer \"$(xsel -o -b)\"; tmux paste-buffer" \; run "tmux display \"Copied from \(+\) $(xsel -o -b | dd ibs=1 obs=1 status=noxfer count=80 2> /dev/null)... \""

# C-d: save into selection clipboard (*). With preselection.
bind C-d choose-buffer "run \"tmux save-buffer -b %% - | xsel -i -p\" \; run \" tmux display \\\"Clipboard \(*\) filled with: $(tmux save-buffer -b %1 - | dd ibs=1 obs=1 status=noxfer count=80 2> /dev/null)... \\\" \" "
# C-f: copy from * clipboard.
bind C-f run "tmux set-buffer \"$(xsel -o -p)\"; tmux paste-buffer" \; run "tmux display \"Copied from \(*\) $(xsel -o -p | dd ibs=1 obs=1 status=noxfer count=80 2> /dev/null)... \""
