" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker :

" Buffer Management {

" F2 to save all bufers
map <F2> :wa<CR>
imap <F2> <ESC>:wa<CR>a

" F1 to save all bufers
map <F1> :wa<CR>
imap <F1> <ESC>:wa<CR>a

" F4 to close a buffer
map <F4> :bd<CR>
imap <F4> <ESC>:bd<CR>

" Map for buffer switching
map gn :bn<cr>
map gp :bp<cr>
map gd :bd<cr>

set hidden " Don't unload buffer when it's hidden

if bufname('%') == ''
    set bufhidden=wipe
endif
"}

" Customization Based on Current Directory {
" This allows me to put a .vim.custom file in every directory to load commands
" and options specific to that directory. If you're working on multiple
" projects that have deep directory structures you might need something more
" sophisticated (e.g. walk up the directory tree until a .vim.custom is
" found), but the same basic idea will work.
if filereadable(".vim.custom")
    so .vim.custom
endif
" }

" General {
" Changing Vim's idea of the terminal.
if !has('gui_running')
    if match($TERM, "screen") != -1
        set term=xterm-256color  " while running in GNU screen override TERM
    endif
endif

" I like to have a different background in GUI and terminal modes,
" so I can use the following if-then.
if !empty($SOLARIZEDBACKGROUND)
    if match(['light', 'dark'], $SOLARIZEDBACKGROUND) != -1
        let &background=$SOLARIZEDBACKGROUND
    endif
else
    if has('gui_running')
        set background=dark  " in GUI run with light background
    endif
endif

" Maximize gvim window.
if has("gui_running")
    set lines=999 columns=999
else
    " This is console Vim.
    if exists("+lines")
        set lines=50
    endif
    if exists("+columns")
        set columns=100
    endif
endif

set shortmess+=I "disable extra splash buffer"
set cryptmethod=blowfish
set list!  " hide unprintable characters
set nospell  " disable spell checking
"set nolist  " disable tab,space markers
let g:indent_guides_enable_on_vim_startup=0
set number
set scrolloff=9999
set viewoptions=cursor,folds,slash,unix  " suggested view settings
"Press i to toggle the appearance of the file tree in netrw (nerdtree style)
let g:netrw_liststyle=3

" }

" GUI Settings {
if has('gui_running')
    set noantialias
    set guifont=Dina\ 12

    set guioptions-=m  "remove menu bar
    set guioptions-=T  "remove toolbar
    set guioptions-=r  "remove right-hand scroll bar
    set guioptions-=L  "remove left-hand scroll bar
endif
" }

" Formatting {
set autoindent  " copy indentation from previous line
"set cindent  " do C program indenting
"set smartindent=off  " has no effect if use cindent

" By default indents text with 2 space characters.
if !exists('g:q_indent_width')
    let g:q_indent_width=2
endif

let &tabstop=g:q_indent_width  " Use 2 space chars to display tab char
let &softtabstop=g:q_indent_width  " Use 2 space chars instead of tab chars
let &shiftwidth=g:q_indent_width  " indent with 2 spaces, represents >> shift
set expandtab  " put spaces instead of tab character

"set textwidth=80  " maximum text width
set textwidth=0  " disables textwidth to make completion
" working for long lines.
"set wrap  " should automatically wrap text longer than 80 characters

" Marks long columns depeding on background color.
if &background == 'dark'
    highlight OverLength ctermbg=black guibg=#073642
else
    highlight OverLength ctermbg=lightgrey guibg=#eee8d5
endif
" Sets priority lower than hlsearch. Effectively highlights search matches.
if exists('w:overlengthmatch')
    call matchdelete(w:overlengthmatch)
endif
let w:overlengthmatch = matchadd('OverLength', '\%80v.*', -1)

" }

" Tags {
" Checks if variable for ctags top directory is set
if !exists('g:q_ctags_top_dir')
    let g:q_ctags_top_dir = "."  " By default stores tags in current directory.
endif
let g:q_ctags_output_file = "" . g:q_ctags_top_dir . "/tags"

set tags += "" . g:q_ctags_output_file
" }

" C/C++ Settings {
" Automatically apply C++ syntax hightlight to C files.
au FileType c set filetype=cpp
" Detecting file type for C++ standard headers with vim.
au BufRead * if search('\M-*- C++ -*-', 'n', 1) | setlocal ft=cpp | endif

" On buffer save generate local tags file (non-recursive as it should be fast).
"au BufWritePost * if &ft =~ 'cpp' | silent !ctags --c++-kinds=+p --fields=+iaS --extra=+q .
" }"

" Keyboard mappings {
" Use vim navigation only {
inoremap kj <Esc>
inoremap <Left>  <NOP>
inoremap <Right> <NOP>
inoremap <Up>    <NOP>
inoremap <Down>  <NOP>
" }
" Misc {
" Does not automatically maximize windows on switching
map <C-J> <C-W>j
map <C-K> <C-W>k
map <C-L> <C-W>l
map <C-H> <C-W>h

nmap <Leader>cd :lcd %:p:h<CR>

"Press F7 to format and return the same line where you were
map <F7> mzgg=G`z<CR>

" Shows svn blame in visual mode on highlighted lines.
vmap <Leader>bl :<C-U>!svn blame <C-R>=expand("%:p") <CR> \| sed -n <C-R>=line("'<") <CR>,<C-R>=line("'>") <CR>p <CR>

" Press Space to turn off highlighting and clear any message already displayed
nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>  

" Bind F5 to remove trailing whitespace or tabs in your files
nnoremap <silent> <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>:retab<CR>

" <Control>+h will move the cursor to the beginning of the text on that line
" and change the first word
map <silent> <C-h> ^cw
"  in visual mode hitting D will duplicate whateverâ€™s selected directly below
vmap D y'>p
" }

" Toggle relative numbering {
function! ToggleNumbering()
    if &relativenumber
        set number
        set norelativenumber
    else
        set relativenumber
        set nonumber
    endif
endfunc
noremap <leader>n :call ToggleNumbering()<cr>
" }

" Grep {
" Recommended installing ack-grep, which is a grep-like utility designed
" specifically for grepping source code files. Then configure vim to use
" it instead of regular grep.
set grepprg=ack-grep\ --cpp\ --cc\ --perl\ --python\ --make
" Pressing <Leader>gr will grep source code files recursively,
" starting from the vim's current working directory, for the word under
" the cursor. Results are put inside 'quickfix' window.
nmap <Leader>gr :grep <C-R>=expand("<cword>")<CR><CR>
" Navigate through quickfix entries by calling :cnext and :cprev.
map <Leader>qw :botright cwindow<CR>
map <Leader>qp :cprev<CR>
map <Leader>qn :cnext<CR>
" }

" Ctags generation. {
"
" Re-generate ctags
" To get mapping characters, press Ctrl-V while in Insert mode, and then the required key.
"au FileType * execute "map <Leader>8 :"
"      \ . "echomsg 'No ctags mapping defined for ' . &filetype . ' "
"      \ . "filetype'<CR>"
"au FileType * execute "map <Leader>8 :"
"      \ . "!ctags -R "
"      \ . "--sort=yes "
"      \ . "--c++-kinds=+p "
"      \ . "--fields=+iaSt --extra=+q "
"      \ . "-f " g:q_ctags_output_file . " " . g:q_ctags_top_dir . "<CR><CR>"

" For case insensitive searching enable fold-case sorting for ctags files.
" It should make searching a lot faster.
execute "map <Leader>8 :"
            \ . "!ctags -R "
            \ . "--sort=foldcase "
            \ . "--c++-kinds=+p "
            \ . "--fields=+iaSt --extra=+q "
            \ . "--langmap=c:,c++:+.c "
            \ . "--exclude=*.so "
            \ . "-f " g:q_ctags_output_file . " " . g:q_ctags_top_dir . "<CR><CR>"
" }

" Append modeline after last line in buffer {
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX
" files.
function! AppendModeline()
    let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d %set ft= :",
                \ &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no')
    let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
    call append(line("$"), l:modeline)
endfunction
nnoremap <silent> <Leader>ml :call AppendModeline()<CR>
" }

" }
